<?php

namespace Core\System\Cron;

use Jobby\Jobby;

class Cron extends Jobby
{

	protected $jobList = [];

	protected function getJobName() : string
	{
		return "__INTERNAL_JOB__".count($this->jobs);
	}

	public function include($command, $value, $jobName = null) : Job
	{
		$jobName = $jobName ?? $this->getJobName();
		$job = new Job($command, $value);
		$this->jobList[$jobName] = $job;
		return $job;
	}

	public function closure(\Closure $value, $jobName = null) : Job
	{
		return $this->include("closure", $value, $jobName);
	}

	public function command($value, $jobName = null) : Job
	{
		return $this->include("command", $value, $jobName);
	}

	public function call($path, $jobName = null, $method = 'GET', $query = '', $contentType = 'application/json', $headers = []) : Job
	{
		return $this->closure(function () use ($path, $method, $query, $contentType, $headers){
			try {
				$slim = \Core\App::getInstance()->slim;
				$ctype = \Core\Http\Http::getContentType();
				$headers['content-type'] = $contentType;
				$data = $slim->subRequest($method, $path, $query, $headers)->getBody()->__toString();
				\Core\Http\Http::setContentType($ctype);
				if (stripos($contentType, 'json') !==false) {
					if (($result = json_decode($data))!==false) {
						echo \jsonpp($data);
						return true;
					}
					throw new \Exception("Unable to call the path \"{$path}\" with method \"{$method}\": " . $data);
				}
				print_r($data);
				return true;
			} catch (\Exception $e) {
				echo "Error: " . $e->getMessage();
				return false;
			}
		}, $jobName);
	}

	public function run()
	{
		foreach ($this->jobList as $name => $job) {
			$this->add($name, (array)$job);
		}
		return parent::run(); // TODO: Change the autogenerated stub
	}
}